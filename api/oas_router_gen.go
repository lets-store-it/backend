// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [4]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "cell-kinds"

				if l := len("cell-kinds"); len(elem) >= l && elem[0:l] == "cell-kinds" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetCellKindsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateCellKindRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteCellKindRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetCellKindByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateCellKindRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

				}

			case 'e': // Prefix: "employees"

				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetEmployeesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetEmployeeByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/role-bindings"

						if l := len("/role-bindings"); len(elem) >= l && elem[0:l] == "/role-bindings" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetRoleBindingsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleAssignRoleRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "roleBindingId"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteRoleBindingRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

						}

					}

				}

			case 'h': // Prefix: "health"

				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetHealthRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'm': // Prefix: "me"

				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetCurrentEmployeeRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 'o': // Prefix: "orders"

				if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetOrdersRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetOrderByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'r': // Prefix: "rbac/roles"

				if l := len("rbac/roles"); len(elem) >= l && elem[0:l] == "rbac/roles" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetRolesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

			case 's': // Prefix: "suppliers"

				if l := len("suppliers"); len(elem) >= l && elem[0:l] == "suppliers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetSuppliersRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateSupplierRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteSupplierRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetSupplierByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateSupplierRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}

				}

			case 'u': // Prefix: "units"

				if l := len("units"); len(elem) >= l && elem[0:l] == "units" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetUnitsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateUnitRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "unitId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetUnitByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/spaces"

						if l := len("/spaces"); len(elem) >= l && elem[0:l] == "/spaces" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetSpacesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateStorageSpaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "spaceId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteStorageSpaceRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetSpaceByIdRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateStorageSpaceRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PUT")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/groups"

								if l := len("/groups"); len(elem) >= l && elem[0:l] == "/groups" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetCellGroupsRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleCreateCellGroupRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "groupId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[2] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch r.Method {
										case "DELETE":
											s.handleDeleteCellGroupRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetCellGroupByIdRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "PUT":
											s.handleUpdateCellGroupRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PUT")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/cells"

										if l := len("/cells"); len(elem) >= l && elem[0:l] == "/cells" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetStorageCellsRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleCreateStorageCellRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,POST")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "cellId"
											// Leaf parameter, slashes are prohibited
											idx := strings.IndexByte(elem, '/')
											if idx >= 0 {
												break
											}
											args[3] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "DELETE":
													s.handleDeleteStorageCellRequest([4]string{
														args[0],
														args[1],
														args[2],
														args[3],
													}, elemIsEscaped, w, r)
												case "GET":
													s.handleGetStorageCellByIdRequest([4]string{
														args[0],
														args[1],
														args[2],
														args[3],
													}, elemIsEscaped, w, r)
												case "PUT":
													s.handleUpdateStorageCellRequest([4]string{
														args[0],
														args[1],
														args[2],
														args[3],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "DELETE,GET,PUT")
												}

												return
											}

										}

									}

								}

							}

						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [4]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "cell-kinds"

				if l := len("cell-kinds"); len(elem) >= l && elem[0:l] == "cell-kinds" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetCellKindsOperation
						r.summary = "Get list of Storage Cell Kinds"
						r.operationID = "getCellKinds"
						r.pathPattern = "/cell-kinds"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateCellKindOperation
						r.summary = "Create Storage Cell Kind"
						r.operationID = "createCellKind"
						r.pathPattern = "/cell-kinds"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteCellKindOperation
							r.summary = "Delete Storage Cell Kind"
							r.operationID = "deleteCellKind"
							r.pathPattern = "/cell-kinds/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetCellKindByIdOperation
							r.summary = "Get Storage Cell Kind by ID"
							r.operationID = "getCellKindById"
							r.pathPattern = "/cell-kinds/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateCellKindOperation
							r.summary = "Update Storage Cell Kind"
							r.operationID = "updateCellKind"
							r.pathPattern = "/cell-kinds/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'e': // Prefix: "employees"

				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetEmployeesOperation
						r.summary = "Get list of Employees in Organization"
						r.operationID = "getEmployees"
						r.pathPattern = "/employees"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetEmployeeByIdOperation
							r.summary = "Get Employee by ID"
							r.operationID = "getEmployeeById"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/role-bindings"

						if l := len("/role-bindings"); len(elem) >= l && elem[0:l] == "/role-bindings" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetRoleBindingsOperation
								r.summary = "Get list of Role Bindings for Employee"
								r.operationID = "getRoleBindings"
								r.pathPattern = "/employees/{id}/role-bindings"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = AssignRoleOperation
								r.summary = "Assign Role to Employee"
								r.operationID = "assignRole"
								r.pathPattern = "/employees/{id}/role-bindings"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "roleBindingId"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteRoleBindingOperation
									r.summary = "Delete Role Binding"
									r.operationID = "deleteRoleBinding"
									r.pathPattern = "/employees/{id}/role-bindings/{roleBindingId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'h': // Prefix: "health"

				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetHealthOperation
						r.summary = "Get API health status"
						r.operationID = "getHealth"
						r.pathPattern = "/health"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'm': // Prefix: "me"

				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetCurrentEmployeeOperation
						r.summary = "Get current Employee"
						r.operationID = "getCurrentEmployee"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'o': // Prefix: "orders"

				if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetOrdersOperation
						r.summary = "Get list of Orders"
						r.operationID = "getOrders"
						r.pathPattern = "/orders"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetOrderByIdOperation
							r.summary = "Get Order by ID with Items"
							r.operationID = "getOrderById"
							r.pathPattern = "/orders/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'r': // Prefix: "rbac/roles"

				if l := len("rbac/roles"); len(elem) >= l && elem[0:l] == "rbac/roles" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetRolesOperation
						r.summary = "Get list of Roles"
						r.operationID = "getRoles"
						r.pathPattern = "/rbac/roles"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "suppliers"

				if l := len("suppliers"); len(elem) >= l && elem[0:l] == "suppliers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetSuppliersOperation
						r.summary = "Get list of Suppliers"
						r.operationID = "getSuppliers"
						r.pathPattern = "/suppliers"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateSupplierOperation
						r.summary = "Create Supplier"
						r.operationID = "createSupplier"
						r.pathPattern = "/suppliers"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteSupplierOperation
							r.summary = "Delete Supplier"
							r.operationID = "deleteSupplier"
							r.pathPattern = "/suppliers/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetSupplierByIdOperation
							r.summary = "Get Supplier by ID"
							r.operationID = "getSupplierById"
							r.pathPattern = "/suppliers/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateSupplierOperation
							r.summary = "Update Supplier"
							r.operationID = "updateSupplier"
							r.pathPattern = "/suppliers/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'u': // Prefix: "units"

				if l := len("units"); len(elem) >= l && elem[0:l] == "units" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetUnitsOperation
						r.summary = "Get list of Organization Units"
						r.operationID = "getUnits"
						r.pathPattern = "/units"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateUnitOperation
						r.summary = "Create Organization Unit"
						r.operationID = "createUnit"
						r.pathPattern = "/units"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "unitId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteUnitOperation
							r.summary = "Delete Organization Unit"
							r.operationID = "deleteUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetUnitByIdOperation
							r.summary = "Get Unit by ID with Spaces"
							r.operationID = "getUnitById"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateUnitOperation
							r.summary = "Update Organization Unit"
							r.operationID = "updateUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/spaces"

						if l := len("/spaces"); len(elem) >= l && elem[0:l] == "/spaces" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetSpacesOperation
								r.summary = "Get list of Storage Spaces in Unit"
								r.operationID = "getSpaces"
								r.pathPattern = "/units/{unitId}/spaces"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = CreateStorageSpaceOperation
								r.summary = "Create Storage Space"
								r.operationID = "createStorageSpace"
								r.pathPattern = "/units/{unitId}/spaces"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "spaceId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = DeleteStorageSpaceOperation
									r.summary = "Delete Storage Space"
									r.operationID = "deleteStorageSpace"
									r.pathPattern = "/units/{unitId}/spaces/{spaceId}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = GetSpaceByIdOperation
									r.summary = "Get Storage Space by ID with Groups"
									r.operationID = "getSpaceById"
									r.pathPattern = "/units/{unitId}/spaces/{spaceId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = UpdateStorageSpaceOperation
									r.summary = "Update Storage Space"
									r.operationID = "updateStorageSpace"
									r.pathPattern = "/units/{unitId}/spaces/{spaceId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/groups"

								if l := len("/groups"); len(elem) >= l && elem[0:l] == "/groups" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetCellGroupsOperation
										r.summary = "Get list of Cell Groups in Storage Space"
										r.operationID = "getCellGroups"
										r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups"
										r.args = args
										r.count = 2
										return r, true
									case "POST":
										r.name = CreateCellGroupOperation
										r.summary = "Create Cell Group in Storage Space"
										r.operationID = "createCellGroup"
										r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"

									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "groupId"
									// Match until "/"
									idx := strings.IndexByte(elem, '/')
									if idx < 0 {
										idx = len(elem)
									}
									args[2] = elem[:idx]
									elem = elem[idx:]

									if len(elem) == 0 {
										switch method {
										case "DELETE":
											r.name = DeleteCellGroupOperation
											r.summary = "Delete Cell Group"
											r.operationID = "deleteCellGroup"
											r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}"
											r.args = args
											r.count = 3
											return r, true
										case "GET":
											r.name = GetCellGroupByIdOperation
											r.summary = "Get Cell Group by ID with Cells"
											r.operationID = "getCellGroupById"
											r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}"
											r.args = args
											r.count = 3
											return r, true
										case "PUT":
											r.name = UpdateCellGroupOperation
											r.summary = "Update Cell Group"
											r.operationID = "updateCellGroup"
											r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/cells"

										if l := len("/cells"); len(elem) >= l && elem[0:l] == "/cells" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = GetStorageCellsOperation
												r.summary = "Get list of Storage Cells in Cell Group"
												r.operationID = "getStorageCells"
												r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}/cells"
												r.args = args
												r.count = 3
												return r, true
											case "POST":
												r.name = CreateStorageCellOperation
												r.summary = "Create Storage Cell in Cell Group"
												r.operationID = "createStorageCell"
												r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}/cells"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											// Param: "cellId"
											// Leaf parameter, slashes are prohibited
											idx := strings.IndexByte(elem, '/')
											if idx >= 0 {
												break
											}
											args[3] = elem
											elem = ""

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "DELETE":
													r.name = DeleteStorageCellOperation
													r.summary = "Delete Storage Cell"
													r.operationID = "deleteStorageCell"
													r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}/cells/{cellId}"
													r.args = args
													r.count = 4
													return r, true
												case "GET":
													r.name = GetStorageCellByIdOperation
													r.summary = "Get Storage Cell by ID"
													r.operationID = "getStorageCellById"
													r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}/cells/{cellId}"
													r.args = args
													r.count = 4
													return r, true
												case "PUT":
													r.name = UpdateStorageCellOperation
													r.summary = "Update Storage Cell"
													r.operationID = "updateStorageCell"
													r.pathPattern = "/units/{unitId}/spaces/{spaceId}/groups/{groupId}/cells/{cellId}"
													r.args = args
													r.count = 4
													return r, true
												default:
													return
												}
											}

										}

									}

								}

							}

						}

					}

				}

			}

		}
	}
	return r, false
}
