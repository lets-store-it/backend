openapi: 3.0.3
info:
  title: storeit â€” backend
  contact:
    email: evgeny@evseevs.ru
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v0
  # - url: https://{orgName}.storeit.ru/api/v0
  #   variables:
  #     orgName:
  #       default: demo
  #       description: Organization name
tags:
  - name: org
  - name: unit
paths:
  /orgs:
    get:
      tags:
        - org
      summary: Get list of Organizations
      operationId: getOrganizations
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrganizationsResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - org
      summary: Create Organization
      operationId: createOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrganizationResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orgs/{id}:
    parameters:
      - name: id
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - org
      summary: Get Organization by ID
      operationId: getOrganizationById
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrganizationByIdResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - org
      summary: Delete Organization
      operationId: deleteOrganization
      responses:
        "200":
          description: Successful operation
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - org
      summary: Update Organization
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganizationRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateOrganizationResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - org
      summary: Update Organization
      operationId: patchOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrganizationRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchOrganizationResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /units:
    get:
      tags:
        - unit
      summary: Get list of Organization Units
      operationId: getOrganizationUnits
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrganizationUnitsResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - unit
      summary: Create Organization Unit
      operationId: createUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrganizationUnitRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateOrganizationUnitResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /units/{id}:
    parameters:
      - name: id
        in: path
        description: Unit ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - unit
      summary: Get Unit by ID with Spaces
      operationId: getOrganizationUnitById
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetOrganizationUnitByIdResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - unit
      summary: Delete Organization Unit
      operationId: deleteOrganizationUnit
      responses:
        "200":
          description: Successful operation
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - unit
      summary: Update Organization Unit
      operationId: updateOrganizationUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrganizationUnitRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateOrganizationUnitResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - unit
      summary: Patch Organization Unit
      operationId: patchOrganizationUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchOrganizationUnitRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchOrganizationUnitResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /storage-groups:
    get:
      tags:
        - storage-group
      summary: Get list of Storage Spaces
      operationId: getStorageGroups
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStorageGroupsResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - storage-group
      summary: Create Storage Space
      operationId: createStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStorageGroupRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateStorageGroupResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /storage-groups/{id}:
    parameters:
      - name: id
        in: path
        description: Storage Space ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - storage-group
      summary: Get Storage Space by ID
      operationId: getStorageGroupById
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetStorageGroupByIdResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - storage-group
      summary: Delete Storage Space
      operationId: deleteStorageGroup
      responses:
        "200":
          description: Successful operation
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - storage-group
      summary: Patch Storage Space
      operationId: patchStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchStorageGroupRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchStorageGroupResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - storage-group
      summary: Update Storage Space
      operationId: updateStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStorageGroupRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateStorageGroupResponse"
        default:
          description: General Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  # parameters:
  # OffsetParam:
  #   name: offset
  #   in: query
  #   description: Number of items to skip
  #   schema:
  #     type: integer
  #     minimum: 0
  #     default: 0
  #     format: int32

  # LimitParam:
  #   name: limit
  #   in: query
  #   description: Maximum number of items to return
  #   schema:
  #     type: integer
  #     minimum: 1
  #     maximum: 100
  #     default: 20
  #     format: int32

  schemas:
    # AuditFields:
    #   type: object
    #   properties:
    #     created_at:
    #       type: string
    #       format: date-time
    #       readOnly: true
    #       example: "2024-01-20T18:00:00Z"
    #     created_by:
    #       type: string
    #       format: uuid
    #       readOnly: true
    #       nullable: true
    #       description: ID of the employee who created the entity
    #       example: "def3df1a-7b8f-4552-b437-a1eab851403f"
    #     updated_at:
    #       type: string
    #       format: date-time
    #       readOnly: true
    #       nullable: true
    #       example: "2024-01-21T10:30:00Z"
    #     updated_by:
    #       type: string
    #       format: uuid
    #       readOnly: true
    #       nullable: true
    #       description: ID of the employee who last updated the entity
    #       example: "123e4567-e89b-12d3-a456-426614174001"
    #   required:
    #     - created_at
    #     - created_by
    #     - updated_at
    #     - updated_by
    # Common
    Error:
      description: Represents error object
      type: object
      properties:
        error_id:
          type: string
        message:
          type: string
      required:
        - error_id
        - message
    # Organization
    GetOrganizationsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Organization"
          required:
            - data
    CreateOrganizationRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/Organization"
    CreateOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: "#/components/schemas/Organization"
          required:
            - data
    GetOrganizationByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: "#/components/schemas/Organization"
          required:
            - data
    UpdateOrganizationRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/Organization"
    UpdateOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Organization"
          required:
            - data
    PatchOrganizationRequest:
      type: object
      properties:
        name:
          type: string
          example: Exotic
        subdomain:
          type: string
          example: exotic
          minLength: 1
          maxLength: 255
          pattern: "^[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$"
    PatchOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Organization"
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        name:
          type: string
          example: Exotic
        subdomain:
          type: string
          example: exotic
          minLength: 1
          maxLength: 255
          pattern: "^[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$"
      required:
        - name
        - subdomain
    # Organization Unit
    Unit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Moscow
        alias:
          type: string
          minLength: 1
          maxLength: 100
          example: MWS
          pattern: "^[A-Z-]+$"
        address:
          type: string
          nullable: true
          maxLength: 200
          example: Amurskaya St. 3
      required:
        - name
        - alias
    GetOrganizationUnitsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Unit"
          required:
            - data
    CreateOrganizationUnitRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/Unit"
    CreateOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: "#/components/schemas/Unit"
    GetOrganizationUnitByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: "#/components/schemas/Unit"
          required:
            - data
    UpdateOrganizationUnitRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/Unit"
    UpdateOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Unit"
          required:
            - data
    PatchOrganizationUnitRequest:
      type: object
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: Moscow
            alias:
              type: string
              example: MWS
            address:
              type: string
    PatchOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Unit"
          required:
            - data
    # Storage Space
    StorageGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        parentId:
          type: string
          format: uuid
          nullable: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        name:
          type: string
          example: Main Warehouse
        alias:
          type: string
          example: MW
        unitId:
          type: string
          format: uuid
          example: def3df1a-7b8f-4552-b437-a1eab851403f
      required:
        - name
        - alias
        - unitId
    CreateStorageGroupRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/StorageGroup"
    CreateStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: "#/components/schemas/StorageGroup"
          required:
            - data
    GetStorageGroupsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/StorageGroup"
          required:
            - data
    GetStorageGroupByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: "#/components/schemas/StorageGroup"
          required:
            - data
    UpdateStorageGroupRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/StorageGroup"
    UpdateStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/StorageGroup"
          required:
            - data
    PatchStorageGroupRequest:
      type: object
      properties:
        name:
          type: string
          example: Main Warehouse
        alias:
          type: string
          example: MW
        unitId:
          type: string
          format: uuid
          nullable: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        parentId:
          type: string
          format: uuid
          example: def3df1a-7b8f-4552-b437-a1eab851403f
    PatchStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/StorageGroup"
          required:
            - data

    # PaginationMetadata:
    #   type: object
    #   properties:
    #     offset:
    #       type: integer
    #       format: int32
    #       example: 0
    #     limit:
    #       type: integer
    #       format: int32
    #       example: 20
    #     total:
    #       type: integer
    #       format: int32
    #       example: 50
    #   required:
    #     - offset
    #     - limit
    #     - total
    # PagedResponse:
    #   type: object
    #   properties:
    #     items:
    #       type: array
    #       items:
    #         type: object
    #     metadata:
    #       $ref: "#/components/schemas/PaginationMetadata"
    #   required:
    #     - metadata
