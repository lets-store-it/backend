// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "p"

					if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "i-tokens"

						if l := len("i-tokens"); len(elem) >= l && elem[0:l] == "i-tokens" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetApiTokensRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateApiTokenRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleRevokeApiTokenRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

						}

					case 'p': // Prefix: "p/roles"

						if l := len("p/roles"); len(elem) >= l && elem[0:l] == "p/roles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetRolesRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'u': // Prefix: "u"

					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "dit-logs"

						if l := len("dit-logs"); len(elem) >= l && elem[0:l] == "dit-logs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetAuditLogsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 't': // Prefix: "th/"

						if l := len("th/"); len(elem) >= l && elem[0:l] == "th/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "logout"

							if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleLogoutRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'o': // Prefix: "oauth2/yandex"

							if l := len("oauth2/yandex"); len(elem) >= l && elem[0:l] == "oauth2/yandex" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleExchangeYandexAccessTokenRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				}

			case 'c': // Prefix: "cells-groups"

				if l := len("cells-groups"); len(elem) >= l && elem[0:l] == "cells-groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetCellsGroupsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateCellsGroupRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "groupId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteCellsGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetCellsGroupByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchCellsGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateCellsGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/cells"

						if l := len("/cells"); len(elem) >= l && elem[0:l] == "/cells" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetCellsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "POST":
								s.handleCreateCellRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "cellId"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDeleteCellRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetCellByIdRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handlePatchCellRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PUT":
									s.handleUpdateCellRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
								}

								return
							}

						}

					}

				}

			case 'e': // Prefix: "employees"

				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetEmployeesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "invite"
						origElem := elem
						if l := len("invite"); len(elem) >= l && elem[0:l] == "invite" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleInviteEmployeeRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}
					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteEmployeeByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetEmployeeByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchEmployeeByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}

				}

			case 'i': // Prefix: "i"

				if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'n': // Prefix: "nstances"

					if l := len("nstances"); len(elem) >= l && elem[0:l] == "nstances" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetInstancesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "instanceId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleDeleteInstanceByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE")
							}

							return
						}

					}

				case 't': // Prefix: "tems"

					if l := len("tems"); len(elem) >= l && elem[0:l] == "tems" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetItemsRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateItemRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "itemId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteItemRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetItemByIdRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handlePatchItemRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateItemRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/instances"

							if l := len("/instances"); len(elem) >= l && elem[0:l] == "/instances" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetInstancesByItemIdRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								case "POST":
									s.handleCreateInstanceForItemRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}

						}

					}

				}

			case 'm': // Prefix: "me"

				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetCurrentUserRequest([0]string{}, elemIsEscaped, w, r)
					case "PATCH":
						s.handlePatchCurrentUserRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handlePutCurrentUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,PATCH,PUT")
					}

					return
				}

			case 'o': // Prefix: "orgs"

				if l := len("orgs"); len(elem) >= l && elem[0:l] == "orgs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetOrganizationsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateOrganizationRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetOrganizationByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			case 's': // Prefix: "storage-groups"

				if l := len("storage-groups"); len(elem) >= l && elem[0:l] == "storage-groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetStorageGroupsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateStorageGroupRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteStorageGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetStorageGroupByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchStorageGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateStorageGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			case 'u': // Prefix: "units"

				if l := len("units"); len(elem) >= l && elem[0:l] == "units" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetOrganizationUnitsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateUnitRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteOrganizationUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetOrganizationUnitByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchOrganizationUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateOrganizationUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "p"

					if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "i-tokens"

						if l := len("i-tokens"); len(elem) >= l && elem[0:l] == "i-tokens" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetApiTokensOperation
								r.summary = "Get list of Service API Tokens"
								r.operationID = "getApiTokens"
								r.pathPattern = "/api-tokens"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = CreateApiTokenOperation
								r.summary = "Create Service API Token"
								r.operationID = "createApiToken"
								r.pathPattern = "/api-tokens"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "id"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = RevokeApiTokenOperation
									r.summary = "Revoke Service API Token"
									r.operationID = "revokeApiToken"
									r.pathPattern = "/api-tokens/{id}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					case 'p': // Prefix: "p/roles"

						if l := len("p/roles"); len(elem) >= l && elem[0:l] == "p/roles" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetRolesOperation
								r.summary = "Get all roles in system"
								r.operationID = "getRoles"
								r.pathPattern = "/app/roles"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				case 'u': // Prefix: "u"

					if l := len("u"); len(elem) >= l && elem[0:l] == "u" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'd': // Prefix: "dit-logs"

						if l := len("dit-logs"); len(elem) >= l && elem[0:l] == "dit-logs" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetAuditLogsOperation
								r.summary = "Get audit logs"
								r.operationID = "getAuditLogs"
								r.pathPattern = "/audit-logs"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 't': // Prefix: "th/"

						if l := len("th/"); len(elem) >= l && elem[0:l] == "th/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'l': // Prefix: "logout"

							if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = LogoutOperation
									r.summary = "Logout user"
									r.operationID = "logout"
									r.pathPattern = "/auth/logout"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'o': // Prefix: "oauth2/yandex"

							if l := len("oauth2/yandex"); len(elem) >= l && elem[0:l] == "oauth2/yandex" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = ExchangeYandexAccessTokenOperation
									r.summary = "Exchange Yandex Access token for Session token"
									r.operationID = "exchangeYandexAccessToken"
									r.pathPattern = "/auth/oauth2/yandex"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'c': // Prefix: "cells-groups"

				if l := len("cells-groups"); len(elem) >= l && elem[0:l] == "cells-groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetCellsGroupsOperation
						r.summary = "Get list of Cells Groups"
						r.operationID = "getCellsGroups"
						r.pathPattern = "/cells-groups"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateCellsGroupOperation
						r.summary = "Create Cells Group"
						r.operationID = "createCellsGroup"
						r.pathPattern = "/cells-groups"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "groupId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteCellsGroupOperation
							r.summary = "Delete Cells Group"
							r.operationID = "deleteCellsGroup"
							r.pathPattern = "/cells-groups/{groupId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetCellsGroupByIdOperation
							r.summary = "Get Cells Group by ID"
							r.operationID = "getCellsGroupById"
							r.pathPattern = "/cells-groups/{groupId}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchCellsGroupOperation
							r.summary = "Patch Cells Group"
							r.operationID = "patchCellsGroup"
							r.pathPattern = "/cells-groups/{groupId}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateCellsGroupOperation
							r.summary = "Update Cells Group"
							r.operationID = "updateCellsGroup"
							r.pathPattern = "/cells-groups/{groupId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/cells"

						if l := len("/cells"); len(elem) >= l && elem[0:l] == "/cells" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetCellsOperation
								r.summary = "Get list of Cells"
								r.operationID = "getCells"
								r.pathPattern = "/cells-groups/{groupId}/cells"
								r.args = args
								r.count = 1
								return r, true
							case "POST":
								r.name = CreateCellOperation
								r.summary = "Create Cells"
								r.operationID = "createCell"
								r.pathPattern = "/cells-groups/{groupId}/cells"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "cellId"
							// Leaf parameter, slashes are prohibited
							idx := strings.IndexByte(elem, '/')
							if idx >= 0 {
								break
							}
							args[1] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = DeleteCellOperation
									r.summary = "Delete Cell"
									r.operationID = "deleteCell"
									r.pathPattern = "/cells-groups/{groupId}/cells/{cellId}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = GetCellByIdOperation
									r.summary = "Get Cell by ID"
									r.operationID = "getCellById"
									r.pathPattern = "/cells-groups/{groupId}/cells/{cellId}"
									r.args = args
									r.count = 2
									return r, true
								case "PATCH":
									r.name = PatchCellOperation
									r.summary = "Patch Cell"
									r.operationID = "patchCell"
									r.pathPattern = "/cells-groups/{groupId}/cells/{cellId}"
									r.args = args
									r.count = 2
									return r, true
								case "PUT":
									r.name = UpdateCellOperation
									r.summary = "Update Cell"
									r.operationID = "updateCell"
									r.pathPattern = "/cells-groups/{groupId}/cells/{cellId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'e': // Prefix: "employees"

				if l := len("employees"); len(elem) >= l && elem[0:l] == "employees" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetEmployeesOperation
						r.summary = "Get employees of the organization"
						r.operationID = "getEmployees"
						r.pathPattern = "/employees"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "invite"
						origElem := elem
						if l := len("invite"); len(elem) >= l && elem[0:l] == "invite" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = InviteEmployeeOperation
								r.summary = "Invite employee to the organization"
								r.operationID = "inviteEmployee"
								r.pathPattern = "/employees/invite"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}
					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteEmployeeByIdOperation
							r.summary = "Delete employee by id"
							r.operationID = "deleteEmployeeById"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetEmployeeByIdOperation
							r.summary = "Get employee by id"
							r.operationID = "getEmployeeById"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchEmployeeByIdOperation
							r.summary = "Update employee by id"
							r.operationID = "patchEmployeeById"
							r.pathPattern = "/employees/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'i': // Prefix: "i"

				if l := len("i"); len(elem) >= l && elem[0:l] == "i" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'n': // Prefix: "nstances"

					if l := len("nstances"); len(elem) >= l && elem[0:l] == "nstances" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetInstancesOperation
							r.summary = "Get list of Instances"
							r.operationID = "getInstances"
							r.pathPattern = "/instances"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "instanceId"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = DeleteInstanceByIdOperation
								r.summary = "Delete Instance by ID"
								r.operationID = "deleteInstanceById"
								r.pathPattern = "/instances/{instanceId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 't': // Prefix: "tems"

					if l := len("tems"); len(elem) >= l && elem[0:l] == "tems" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetItemsOperation
							r.summary = "Get list of Items"
							r.operationID = "getItems"
							r.pathPattern = "/items"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateItemOperation
							r.summary = "Create Item"
							r.operationID = "createItem"
							r.pathPattern = "/items"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "itemId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = DeleteItemOperation
								r.summary = "Delete Item"
								r.operationID = "deleteItem"
								r.pathPattern = "/items/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetItemByIdOperation
								r.summary = "Get Item by ID"
								r.operationID = "getItemById"
								r.pathPattern = "/items/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = PatchItemOperation
								r.summary = "Patch Item"
								r.operationID = "patchItem"
								r.pathPattern = "/items/{id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = UpdateItemOperation
								r.summary = "Update Item"
								r.operationID = "updateItem"
								r.pathPattern = "/items/{id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/instances"

							if l := len("/instances"); len(elem) >= l && elem[0:l] == "/instances" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetInstancesByItemIdOperation
									r.summary = "Get list of Instances For Item"
									r.operationID = "getInstancesByItemId"
									r.pathPattern = "/items/{itemId}/instances"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									r.name = CreateInstanceForItemOperation
									r.summary = "Create Instance For Item"
									r.operationID = "createInstanceForItem"
									r.pathPattern = "/items/{itemId}/instances"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'm': // Prefix: "me"

				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = GetCurrentUserOperation
						r.summary = "Get Current User"
						r.operationID = "getCurrentUser"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					case "PATCH":
						r.name = PatchCurrentUserOperation
						r.summary = "Update Current User"
						r.operationID = "patchCurrentUser"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = PutCurrentUserOperation
						r.summary = "Update Current User"
						r.operationID = "putCurrentUser"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 'o': // Prefix: "orgs"

				if l := len("orgs"); len(elem) >= l && elem[0:l] == "orgs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetOrganizationsOperation
						r.summary = "Get list of Organizations"
						r.operationID = "getOrganizations"
						r.pathPattern = "/orgs"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateOrganizationOperation
						r.summary = "Create Organization"
						r.operationID = "createOrganization"
						r.pathPattern = "/orgs"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteOrganizationOperation
							r.summary = "Delete Organization"
							r.operationID = "deleteOrganization"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetOrganizationByIdOperation
							r.summary = "Get Organization by ID"
							r.operationID = "getOrganizationById"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchOrganizationOperation
							r.summary = "Update Organization"
							r.operationID = "patchOrganization"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateOrganizationOperation
							r.summary = "Update Organization"
							r.operationID = "updateOrganization"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 's': // Prefix: "storage-groups"

				if l := len("storage-groups"); len(elem) >= l && elem[0:l] == "storage-groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetStorageGroupsOperation
						r.summary = "Get list of Storage Groups"
						r.operationID = "getStorageGroups"
						r.pathPattern = "/storage-groups"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateStorageGroupOperation
						r.summary = "Create Storage Group"
						r.operationID = "createStorageGroup"
						r.pathPattern = "/storage-groups"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteStorageGroupOperation
							r.summary = "Delete Storage Group"
							r.operationID = "deleteStorageGroup"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetStorageGroupByIdOperation
							r.summary = "Get Storage Group by ID"
							r.operationID = "getStorageGroupById"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchStorageGroupOperation
							r.summary = "Patch Storage Group"
							r.operationID = "patchStorageGroup"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateStorageGroupOperation
							r.summary = "Update Storage Group"
							r.operationID = "updateStorageGroup"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'u': // Prefix: "units"

				if l := len("units"); len(elem) >= l && elem[0:l] == "units" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetOrganizationUnitsOperation
						r.summary = "Get list of Organization Units"
						r.operationID = "getOrganizationUnits"
						r.pathPattern = "/units"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateUnitOperation
						r.summary = "Create Organization Unit"
						r.operationID = "createUnit"
						r.pathPattern = "/units"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteOrganizationUnitOperation
							r.summary = "Delete Organization Unit"
							r.operationID = "deleteOrganizationUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetOrganizationUnitByIdOperation
							r.summary = "Get Unit by ID"
							r.operationID = "getOrganizationUnitById"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchOrganizationUnitOperation
							r.summary = "Patch Organization Unit"
							r.operationID = "patchOrganizationUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateOrganizationUnitOperation
							r.summary = "Update Organization Unit"
							r.operationID = "updateOrganizationUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
