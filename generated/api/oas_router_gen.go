// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'i': // Prefix: "items"

				if l := len("items"); len(elem) >= l && elem[0:l] == "items" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetItemsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateItemRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteItemRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetItemByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchItemRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateItemRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			case 'o': // Prefix: "orgs"

				if l := len("orgs"); len(elem) >= l && elem[0:l] == "orgs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetOrganizationsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateOrganizationRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetOrganizationByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateOrganizationRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			case 's': // Prefix: "storage-groups"

				if l := len("storage-groups"); len(elem) >= l && elem[0:l] == "storage-groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetStorageGroupsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateStorageGroupRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteStorageGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetStorageGroupByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchStorageGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateStorageGroupRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			case 'u': // Prefix: "units"

				if l := len("units"); len(elem) >= l && elem[0:l] == "units" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetOrganizationUnitsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateUnitRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteOrganizationUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetOrganizationUnitByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handlePatchOrganizationUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateOrganizationUnitRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH,PUT")
						}

						return
					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'i': // Prefix: "items"

				if l := len("items"); len(elem) >= l && elem[0:l] == "items" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetItemsOperation
						r.summary = "Get list of Items"
						r.operationID = "getItems"
						r.pathPattern = "/items"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateItemOperation
						r.summary = "Create Item"
						r.operationID = "createItem"
						r.pathPattern = "/items"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteItemOperation
							r.summary = "Delete Item"
							r.operationID = "deleteItem"
							r.pathPattern = "/items/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetItemByIdOperation
							r.summary = "Get Item by ID"
							r.operationID = "getItemById"
							r.pathPattern = "/items/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchItemOperation
							r.summary = "Patch Item"
							r.operationID = "patchItem"
							r.pathPattern = "/items/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateItemOperation
							r.summary = "Update Item"
							r.operationID = "updateItem"
							r.pathPattern = "/items/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'o': // Prefix: "orgs"

				if l := len("orgs"); len(elem) >= l && elem[0:l] == "orgs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetOrganizationsOperation
						r.summary = "Get list of Organizations"
						r.operationID = "getOrganizations"
						r.pathPattern = "/orgs"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateOrganizationOperation
						r.summary = "Create Organization"
						r.operationID = "createOrganization"
						r.pathPattern = "/orgs"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteOrganizationOperation
							r.summary = "Delete Organization"
							r.operationID = "deleteOrganization"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetOrganizationByIdOperation
							r.summary = "Get Organization by ID"
							r.operationID = "getOrganizationById"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchOrganizationOperation
							r.summary = "Update Organization"
							r.operationID = "patchOrganization"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateOrganizationOperation
							r.summary = "Update Organization"
							r.operationID = "updateOrganization"
							r.pathPattern = "/orgs/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 's': // Prefix: "storage-groups"

				if l := len("storage-groups"); len(elem) >= l && elem[0:l] == "storage-groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetStorageGroupsOperation
						r.summary = "Get list of Storage Spaces"
						r.operationID = "getStorageGroups"
						r.pathPattern = "/storage-groups"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateStorageGroupOperation
						r.summary = "Create Storage Space"
						r.operationID = "createStorageGroup"
						r.pathPattern = "/storage-groups"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteStorageGroupOperation
							r.summary = "Delete Storage Space"
							r.operationID = "deleteStorageGroup"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetStorageGroupByIdOperation
							r.summary = "Get Storage Space by ID"
							r.operationID = "getStorageGroupById"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchStorageGroupOperation
							r.summary = "Patch Storage Space"
							r.operationID = "patchStorageGroup"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateStorageGroupOperation
							r.summary = "Update Storage Space"
							r.operationID = "updateStorageGroup"
							r.pathPattern = "/storage-groups/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'u': // Prefix: "units"

				if l := len("units"); len(elem) >= l && elem[0:l] == "units" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetOrganizationUnitsOperation
						r.summary = "Get list of Organization Units"
						r.operationID = "getOrganizationUnits"
						r.pathPattern = "/units"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateUnitOperation
						r.summary = "Create Organization Unit"
						r.operationID = "createUnit"
						r.pathPattern = "/units"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = DeleteOrganizationUnitOperation
							r.summary = "Delete Organization Unit"
							r.operationID = "deleteOrganizationUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetOrganizationUnitByIdOperation
							r.summary = "Get Unit by ID with Spaces"
							r.operationID = "getOrganizationUnitById"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = PatchOrganizationUnitOperation
							r.summary = "Patch Organization Unit"
							r.operationID = "patchOrganizationUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							r.name = UpdateOrganizationUnitOperation
							r.summary = "Update Organization Unit"
							r.operationID = "updateOrganizationUnit"
							r.pathPattern = "/units/{id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			}

		}
	}
	return r, false
}
