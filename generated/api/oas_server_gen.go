// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateOrg implements createOrg operation.
	//
	// Create Organization.
	//
	// POST /orgs
	CreateOrg(ctx context.Context, req *Org) (*Org, error)
	// CreateUnit implements createUnit operation.
	//
	// Create Organization Unit.
	//
	// POST /units
	CreateUnit(ctx context.Context, req *Unit) (*Unit, error)
	// DeleteOrg implements deleteOrg operation.
	//
	// Delete Organization.
	//
	// DELETE /orgs/{id}
	DeleteOrg(ctx context.Context, params DeleteOrgParams) error
	// DeleteUnit implements deleteUnit operation.
	//
	// Delete Organization Unit.
	//
	// DELETE /units/{id}
	DeleteUnit(ctx context.Context, params DeleteUnitParams) error
	// GetOrgById implements getOrgById operation.
	//
	// Get Organization by ID.
	//
	// GET /orgs/{id}
	GetOrgById(ctx context.Context, params GetOrgByIdParams) (*Org, error)
	// GetOrgs implements getOrgs operation.
	//
	// Get list of Organizations.
	//
	// GET /orgs
	GetOrgs(ctx context.Context, params GetOrgsParams) (*GetOrgsOK, error)
	// GetUnitById implements getUnitById operation.
	//
	// Get Unit by ID with Spaces.
	//
	// GET /units/{id}
	GetUnitById(ctx context.Context, params GetUnitByIdParams) (*GetUnitByIdOK, error)
	// GetUnits implements getUnits operation.
	//
	// Get list of Organization Units.
	//
	// GET /units
	GetUnits(ctx context.Context, params GetUnitsParams) (*GetUnitsOK, error)
	// UpdateOrg implements updateOrg operation.
	//
	// Update Organization.
	//
	// PUT /orgs/{id}
	UpdateOrg(ctx context.Context, req *Org, params UpdateOrgParams) (*Org, error)
	// UpdateUnit implements updateUnit operation.
	//
	// Update Organization Unit.
	//
	// PUT /units/{id}
	UpdateUnit(ctx context.Context, req *Unit, params UpdateUnitParams) (*Unit, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
