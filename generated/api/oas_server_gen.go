// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateOrganization implements createOrganization operation.
	//
	// Create Organization.
	//
	// POST /orgs
	CreateOrganization(ctx context.Context, req *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// DeleteOrganization implements deleteOrganization operation.
	//
	// Delete Organization.
	//
	// DELETE /orgs/{id}
	DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) error
	// GetOrganizationById implements getOrganizationById operation.
	//
	// Get Organization by ID.
	//
	// GET /orgs/{id}
	GetOrganizationById(ctx context.Context, params GetOrganizationByIdParams) (*GetOrganizationByIdResponse, error)
	// GetOrganizations implements getOrganizations operation.
	//
	// Get list of Organizations.
	//
	// GET /orgs
	GetOrganizations(ctx context.Context) (*GetOrganizationsResponse, error)
	// PatchOrganization implements patchOrganization operation.
	//
	// Update Organization.
	//
	// PATCH /orgs/{id}
	PatchOrganization(ctx context.Context, req *PatchOrganizationRequest, params PatchOrganizationParams) (*PatchOrganizationResponse, error)
	// UpdateOrganization implements updateOrganization operation.
	//
	// Update Organization.
	//
	// PUT /orgs/{id}
	UpdateOrganization(ctx context.Context, req *UpdateOrganizationRequest, params UpdateOrganizationParams) (*UpdateOrganizationResponse, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
