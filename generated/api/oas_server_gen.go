// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateApiToken implements createApiToken operation.
	//
	// Create Service API Token.
	//
	// POST /api-tokens
	CreateApiToken(ctx context.Context, req *CreateApiTokenRequest) (CreateApiTokenRes, error)
	// CreateCell implements createCell operation.
	//
	// Create Cells.
	//
	// POST /cells-groups/{groupId}/cells
	CreateCell(ctx context.Context, req *CreateCellRequest, params CreateCellParams) (CreateCellRes, error)
	// CreateCellsGroup implements createCellsGroup operation.
	//
	// Create Cells Group.
	//
	// POST /cells-groups
	CreateCellsGroup(ctx context.Context, req *CreateCellsGroupRequest) (CreateCellsGroupRes, error)
	// CreateInstanceForItem implements createInstanceForItem operation.
	//
	// Create Instance For Item.
	//
	// POST /items/{itemId}/instances
	CreateInstanceForItem(ctx context.Context, req *CreateInstanceForItemRequest, params CreateInstanceForItemParams) (CreateInstanceForItemRes, error)
	// CreateItem implements createItem operation.
	//
	// Create Item.
	//
	// POST /items
	CreateItem(ctx context.Context, req *CreateItemRequest) (CreateItemRes, error)
	// CreateItemVariant implements createItemVariant operation.
	//
	// Create Item Variant.
	//
	// POST /items/{id}/variants
	CreateItemVariant(ctx context.Context, req *CreateItemVariantRequest, params CreateItemVariantParams) (CreateItemVariantRes, error)
	// CreateOrganization implements createOrganization operation.
	//
	// Create new Organization.
	//
	// POST /orgs
	CreateOrganization(ctx context.Context, req *CreateOrganizationRequest) (CreateOrganizationRes, error)
	// CreateStorageGroup implements createStorageGroup operation.
	//
	// Create Storage Group.
	//
	// POST /storage-groups
	CreateStorageGroup(ctx context.Context, req *StorageGroupBase) (CreateStorageGroupRes, error)
	// CreateTask implements createTask operation.
	//
	// Create a task.
	//
	// POST /tasks
	CreateTask(ctx context.Context, req *CreateTaskRequest) (CreateTaskRes, error)
	// CreateTvBoard implements createTvBoard operation.
	//
	// Create TV Board.
	//
	// POST /tv-boards
	CreateTvBoard(ctx context.Context, req *CreateTvBoardRequest) (CreateTvBoardRes, error)
	// CreateUnit implements createUnit operation.
	//
	// Create Organization Unit.
	//
	// POST /units
	CreateUnit(ctx context.Context, req *UnitBase) (CreateUnitRes, error)
	// DeleteCell implements deleteCell operation.
	//
	// Delete Cell.
	//
	// DELETE /cells-groups/{groupId}/cells/{cellId}
	DeleteCell(ctx context.Context, params DeleteCellParams) (DeleteCellRes, error)
	// DeleteCellsGroup implements deleteCellsGroup operation.
	//
	// Delete Cells Group.
	//
	// DELETE /cells-groups/{groupId}
	DeleteCellsGroup(ctx context.Context, params DeleteCellsGroupParams) (DeleteCellsGroupRes, error)
	// DeleteEmployeeById implements deleteEmployeeById operation.
	//
	// Delete employee by id.
	//
	// DELETE /employees/{id}
	DeleteEmployeeById(ctx context.Context, params DeleteEmployeeByIdParams) (DeleteEmployeeByIdRes, error)
	// DeleteInstanceById implements deleteInstanceById operation.
	//
	// Delete Instance by ID.
	//
	// DELETE /instances/{instanceId}
	DeleteInstanceById(ctx context.Context, params DeleteInstanceByIdParams) (DeleteInstanceByIdRes, error)
	// DeleteItem implements deleteItem operation.
	//
	// Delete Item.
	//
	// DELETE /items/{id}
	DeleteItem(ctx context.Context, params DeleteItemParams) (DeleteItemRes, error)
	// DeleteItemVariant implements deleteItemVariant operation.
	//
	// Delete Item Variant By ID.
	//
	// DELETE /items/{id}/variants/{variantId}
	DeleteItemVariant(ctx context.Context, params DeleteItemVariantParams) (DeleteItemVariantRes, error)
	// DeleteOrganization implements deleteOrganization operation.
	//
	// Delete Organization.
	//
	// DELETE /orgs/{id}
	DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (DeleteOrganizationRes, error)
	// DeleteOrganizationUnit implements deleteOrganizationUnit operation.
	//
	// Delete Organization Unit.
	//
	// DELETE /units/{id}
	DeleteOrganizationUnit(ctx context.Context, params DeleteOrganizationUnitParams) (DeleteOrganizationUnitRes, error)
	// DeleteStorageGroup implements deleteStorageGroup operation.
	//
	// Delete Storage Group.
	//
	// DELETE /storage-groups/{id}
	DeleteStorageGroup(ctx context.Context, params DeleteStorageGroupParams) (DeleteStorageGroupRes, error)
	// DeleteTvBoard implements deleteTvBoard operation.
	//
	// Delete TV Board.
	//
	// DELETE /tv-boards/{id}
	DeleteTvBoard(ctx context.Context, params DeleteTvBoardParams) (DeleteTvBoardRes, error)
	// ExchangeYandexAccessToken implements exchangeYandexAccessToken operation.
	//
	// Exchange Yandex Access token for Session token.
	//
	// POST /auth/oauth2/yandex
	ExchangeYandexAccessToken(ctx context.Context, req *ExchangeYandexAccessTokenReq) (ExchangeYandexAccessTokenRes, error)
	// GetApiTokens implements getApiTokens operation.
	//
	// Get list of Service API Tokens.
	//
	// GET /api-tokens
	GetApiTokens(ctx context.Context) (GetApiTokensRes, error)
	// GetAuditLogs implements getAuditLogs operation.
	//
	// Get audit logs.
	//
	// GET /audit-logs
	GetAuditLogs(ctx context.Context, params GetAuditLogsParams) (GetAuditLogsRes, error)
	// GetCellById implements getCellById operation.
	//
	// Get Cell by ID.
	//
	// GET /cells-groups/{groupId}/cells/{cellId}
	GetCellById(ctx context.Context, params GetCellByIdParams) (GetCellByIdRes, error)
	// GetCells implements getCells operation.
	//
	// Get list of Cells.
	//
	// GET /cells-groups/{groupId}/cells
	GetCells(ctx context.Context, params GetCellsParams) (GetCellsRes, error)
	// GetCellsGroupById implements getCellsGroupById operation.
	//
	// Get Cells Group by ID.
	//
	// GET /cells-groups/{groupId}
	GetCellsGroupById(ctx context.Context, params GetCellsGroupByIdParams) (GetCellsGroupByIdRes, error)
	// GetCellsGroups implements getCellsGroups operation.
	//
	// Get list of Cells Groups.
	//
	// GET /cells-groups
	GetCellsGroups(ctx context.Context) (GetCellsGroupsRes, error)
	// GetCurrentUser implements getCurrentUser operation.
	//
	// Get Current User.
	//
	// GET /me
	GetCurrentUser(ctx context.Context) (GetCurrentUserRes, error)
	// GetEmployeeById implements getEmployeeById operation.
	//
	// Get employee by id.
	//
	// GET /employees/{id}
	GetEmployeeById(ctx context.Context, params GetEmployeeByIdParams) (GetEmployeeByIdRes, error)
	// GetEmployees implements getEmployees operation.
	//
	// Get all employees.
	//
	// GET /employees
	GetEmployees(ctx context.Context) (GetEmployeesRes, error)
	// GetInstanceById implements getInstanceById operation.
	//
	// Get Instance by ID.
	//
	// GET /instances/{instanceId}
	GetInstanceById(ctx context.Context, params GetInstanceByIdParams) (GetInstanceByIdRes, error)
	// GetInstances implements getInstances operation.
	//
	// Get list of Instances.
	//
	// GET /instances
	GetInstances(ctx context.Context) (GetInstancesRes, error)
	// GetInstancesByItemId implements getInstancesByItemId operation.
	//
	// Get list of Instances For Item.
	//
	// GET /items/{itemId}/instances
	GetInstancesByItemId(ctx context.Context, params GetInstancesByItemIdParams) (GetInstancesByItemIdRes, error)
	// GetItemById implements getItemById operation.
	//
	// Get Item by ID.
	//
	// GET /items/{id}
	GetItemById(ctx context.Context, params GetItemByIdParams) (GetItemByIdRes, error)
	// GetItemVariantById implements getItemVariantById operation.
	//
	// Get Item Variant By ID.
	//
	// GET /items/{id}/variants/{variantId}
	GetItemVariantById(ctx context.Context, params GetItemVariantByIdParams) (GetItemVariantByIdRes, error)
	// GetItemVariants implements getItemVariants operation.
	//
	// Get Item Variants.
	//
	// GET /items/{id}/variants
	GetItemVariants(ctx context.Context, params GetItemVariantsParams) (GetItemVariantsRes, error)
	// GetItems implements getItems operation.
	//
	// Get list of Items.
	//
	// GET /items
	GetItems(ctx context.Context) (GetItemsRes, error)
	// GetOrganizationById implements getOrganizationById operation.
	//
	// Get Organization by ID.
	//
	// GET /orgs/{id}
	GetOrganizationById(ctx context.Context, params GetOrganizationByIdParams) (GetOrganizationByIdRes, error)
	// GetOrganizationUnitById implements getOrganizationUnitById operation.
	//
	// Get Unit by ID.
	//
	// GET /units/{id}
	GetOrganizationUnitById(ctx context.Context, params GetOrganizationUnitByIdParams) (GetOrganizationUnitByIdRes, error)
	// GetOrganizationUnits implements getOrganizationUnits operation.
	//
	// Get list of Organization Units.
	//
	// GET /units
	GetOrganizationUnits(ctx context.Context) (GetOrganizationUnitsRes, error)
	// GetOrganizations implements getOrganizations operation.
	//
	// Get list of user Organizations.
	//
	// GET /orgs
	GetOrganizations(ctx context.Context) (GetOrganizationsRes, error)
	// GetRoles implements getRoles operation.
	//
	// Get all roles in system.
	//
	// GET /app/roles
	GetRoles(ctx context.Context) (GetRolesRes, error)
	// GetStorageGroupById implements getStorageGroupById operation.
	//
	// Get Storage Group by ID.
	//
	// GET /storage-groups/{id}
	GetStorageGroupById(ctx context.Context, params GetStorageGroupByIdParams) (GetStorageGroupByIdRes, error)
	// GetStorageGroups implements getStorageGroups operation.
	//
	// Get list of Storage Groups.
	//
	// GET /storage-groups
	GetStorageGroups(ctx context.Context) (GetStorageGroupsRes, error)
	// GetTaskById implements getTaskById operation.
	//
	// Get Task by ID.
	//
	// GET /tasks/{id}
	GetTaskById(ctx context.Context, params GetTaskByIdParams) (GetTaskByIdRes, error)
	// GetTasks implements getTasks operation.
	//
	// Get all tasks for organization.
	//
	// GET /tasks
	GetTasks(ctx context.Context) (GetTasksRes, error)
	// GetTvBoards implements getTvBoards operation.
	//
	// Get list of TV Boards.
	//
	// GET /tv-boards
	GetTvBoards(ctx context.Context) (GetTvBoardsRes, error)
	// GetTvBoardsData implements getTvBoardsData operation.
	//
	// Get data for rendering on TV Board.
	//
	// GET /tv-boards/{tvToken}/data
	GetTvBoardsData(ctx context.Context, params GetTvBoardsDataParams) (GetTvBoardsDataRes, error)
	// InviteEmployee implements inviteEmployee operation.
	//
	// Invite employee to the organization.
	//
	// POST /employees/invite
	InviteEmployee(ctx context.Context, req *InviteEmployeeRequest) (InviteEmployeeRes, error)
	// Logout implements logout operation.
	//
	// Logout user.
	//
	// GET /auth/logout
	Logout(ctx context.Context) (LogoutRes, error)
	// MarkTaskAsAwaiting implements markTaskAsAwaiting operation.
	//
	// Mark task as awaiting to collect.
	//
	// POST /tasks/{id}/awaiting
	MarkTaskAsAwaiting(ctx context.Context, params MarkTaskAsAwaitingParams) (MarkTaskAsAwaitingRes, error)
	// MarkTaskAsCompleted implements markTaskAsCompleted operation.
	//
	// Mark task as completed.
	//
	// POST /tasks/{id}/done
	MarkTaskAsCompleted(ctx context.Context, params MarkTaskAsCompletedParams) (MarkTaskAsCompletedRes, error)
	// PatchEmployeeById implements patchEmployeeById operation.
	//
	// Update employee by id.
	//
	// PATCH /employees/{id}
	PatchEmployeeById(ctx context.Context, req *PatchEmployeeRequest, params PatchEmployeeByIdParams) (PatchEmployeeByIdRes, error)
	// PickInstanceFromCell implements pickInstanceFromCell operation.
	//
	// Pick an item from cell.
	//
	// POST /tasks/{id}/pick-instance
	PickInstanceFromCell(ctx context.Context, req *PickInstanceFromCellReq, params PickInstanceFromCellParams) (PickInstanceFromCellRes, error)
	// RevokeApiToken implements revokeApiToken operation.
	//
	// Revoke Service API Token.
	//
	// DELETE /api-tokens/{id}
	RevokeApiToken(ctx context.Context, params RevokeApiTokenParams) (RevokeApiTokenRes, error)
	// UpdateCell implements updateCell operation.
	//
	// Update Cell.
	//
	// PUT /cells-groups/{groupId}/cells/{cellId}
	UpdateCell(ctx context.Context, req *UpdateCellRequest, params UpdateCellParams) (UpdateCellRes, error)
	// UpdateCellsGroup implements updateCellsGroup operation.
	//
	// Update Cells Group.
	//
	// PUT /cells-groups/{groupId}
	UpdateCellsGroup(ctx context.Context, req *UpdateCellsGroupRequest, params UpdateCellsGroupParams) (UpdateCellsGroupRes, error)
	// UpdateInstanceById implements updateInstanceById operation.
	//
	// Update Instance by ID.
	//
	// PUT /instances/{instanceId}
	UpdateInstanceById(ctx context.Context, req *UpdateInstanceRequest, params UpdateInstanceByIdParams) (UpdateInstanceByIdRes, error)
	// UpdateItem implements updateItem operation.
	//
	// Update Item.
	//
	// PUT /items/{id}
	UpdateItem(ctx context.Context, req *UpdateItemRequest, params UpdateItemParams) (UpdateItemRes, error)
	// UpdateItemVariant implements updateItemVariant operation.
	//
	// Update Item Variant By ID.
	//
	// PUT /items/{id}/variants/{variantId}
	UpdateItemVariant(ctx context.Context, req *UpdateItemVariantRequest, params UpdateItemVariantParams) (UpdateItemVariantRes, error)
	// UpdateOrganization implements updateOrganization operation.
	//
	// Update Organization.
	//
	// PUT /orgs/{id}
	UpdateOrganization(ctx context.Context, req *OrganizationUpdate, params UpdateOrganizationParams) (UpdateOrganizationRes, error)
	// UpdateOrganizationUnit implements updateOrganizationUnit operation.
	//
	// Update Organization Unit.
	//
	// PUT /units/{id}
	UpdateOrganizationUnit(ctx context.Context, req *UnitBase, params UpdateOrganizationUnitParams) (UpdateOrganizationUnitRes, error)
	// UpdateStorageGroup implements updateStorageGroup operation.
	//
	// Update Storage Group.
	//
	// PUT /storage-groups/{id}
	UpdateStorageGroup(ctx context.Context, req *StorageGroupBase, params UpdateStorageGroupParams) (UpdateStorageGroupRes, error)
	// NewError creates *DefaultErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *DefaultErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
