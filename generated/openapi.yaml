openapi: 3.0.3
info:
  title: storeit â€” backend
  contact:
    email: evgeny@evseevs.ru
  version: 0.0.1
  license:
    name: PRIVATE
    url: https://store-it.ru
servers:
  - url: http://localhost:8080/
security:
  - apiToken: []
  - cookie: []
tags: []
paths:
  /orgs:
    get:
      tags:
        - org
      summary: Get list of user Organizations
      operationId: getOrganizations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - org
      summary: Create new Organization
      operationId: createOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '409':
          $ref: '#/components/responses/default-conflict'
        default:
          $ref: '#/components/responses/default-error'
  /orgs/{id}:
    parameters:
      - name: id
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - org
      summary: Get Organization by ID
      operationId: getOrganizationById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationByIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - org
      summary: Delete Organization
      operationId: deleteOrganization
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - org
      summary: Update Organization
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /units:
    get:
      tags:
        - unit
      summary: Get list of Organization Units
      operationId: getOrganizationUnits
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationUnitsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - unit
      summary: Create Organization Unit
      operationId: createUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationUnitRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationUnitResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /units/{id}:
    parameters:
      - name: id
        in: path
        description: Unit ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - unit
      summary: Get Unit by ID
      operationId: getOrganizationUnitById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationUnitByIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - unit
      summary: Delete Organization Unit
      operationId: deleteOrganizationUnit
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - unit
      summary: Update Organization Unit
      operationId: updateOrganizationUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationUnitRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationUnitResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - unit
      summary: Patch Organization Unit
      operationId: patchOrganizationUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrganizationUnitRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchOrganizationUnitResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /storage-groups:
    get:
      tags:
        - storage-group
      summary: Get list of Storage Groups
      operationId: getStorageGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStorageGroupsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - storage-group
      summary: Create Storage Group
      operationId: createStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStorageGroupResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /storage-groups/{id}:
    parameters:
      - name: id
        in: path
        description: Storage Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - storage-group
      summary: Get Storage Group by ID
      operationId: getStorageGroupById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStorageGroupByIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - storage-group
      summary: Delete Storage Group
      operationId: deleteStorageGroup
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - storage-group
      summary: Update Storage Group
      operationId: updateStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorageGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStorageGroupResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups:
    get:
      tags:
        - cells-group
      summary: Get list of Cells Groups
      operationId: getCellsGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellsGroupsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - cells-group
      summary: Create Cells Group
      operationId: createCellsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCellsGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCellsGroupResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: Cells Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - cells-group
      summary: Get Cells Group by ID
      operationId: getCellsGroupById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellsGroupByIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - cells-group
      summary: Delete Cells Group
      operationId: deleteCellsGroup
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - cells-group
      summary: Update Cells Group
      operationId: updateCellsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCellsGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCellsGroupResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups/{groupId}/cells:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - cells-group
      summary: Get list of Cells
      operationId: getCells
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - cells-group
      summary: Create Cells
      operationId: createCell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCellRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCellResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups/{groupId}/cells/{cellId}:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: cellId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - cells-group
      summary: Get Cell by ID
      operationId: getCellById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - cells-group
      summary: Delete Cell
      operationId: deleteCell
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - cells-group
      summary: Update Cell
      operationId: updateCell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCellRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCellResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /items:
    get:
      tags:
        - item
      summary: Get list of Items
      operationId: getItems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - item
      summary: Create Item
      operationId: createItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateItemResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /items/{id}/variants:
    parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - item
      summary: Get Item Variants
      operationId: getItemVariants
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemVariantsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - item
      summary: Create Item Variant
      operationId: createItemVariant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemVariantRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateItemVariantResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /items/{id}/variants/{variantId}:
    parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: string
          format: uuid
      - name: variantId
        in: path
        description: Variant ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - item
      summary: Get Item Variant By ID
      operationId: getItemVariantById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemVariantByIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - item
      summary: Update Item Variant By ID
      operationId: updateItemVariant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemVariantRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateItemVariantResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - item
      summary: Delete Item Variant By ID
      operationId: deleteItemVariant
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /items/{id}:
    parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - item
      summary: Get Item by ID
      operationId: getItemById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemByIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - item
      summary: Delete Item
      operationId: deleteItem
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - item
      summary: Update Item
      operationId: updateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateItemResponse'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /instances:
    get:
      tags:
        - instance
      summary: Get list of Instances
      operationId: getInstances
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInstancesResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /items/{itemId}/instances:
    parameters:
      - name: itemId
        in: path
        description: Item ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - instance
      summary: Get list of Instances For Item
      operationId: getInstancesByItemId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInstancesByItemIdResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - instance
      summary: Create Instance For Item
      operationId: createInstanceForItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstanceForItemRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateInstanceForItemResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /instances/{instanceId}:
    parameters:
      - name: instanceId
        in: path
        description: Instance ID
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - instance
      summary: Delete Instance by ID
      operationId: deleteInstanceById
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /api-tokens:
    get:
      tags:
        - auth
      summary: Get list of Service API Tokens
      operationId: getApiTokens
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiTokensResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - auth
      summary: Create Service API Token
      operationId: createApiToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiTokenResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /api-tokens/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - auth
      summary: Revoke Service API Token
      operationId: revokeApiToken
      responses:
        '204':
          description: Successful operation
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /auth/oauth2/yandex:
    post:
      security: []
      tags:
        - auth
      summary: Exchange Yandex Access token for Session token
      operationId: exchangeYandexAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: Yandex Access token received from Yandex OAuth on Frontend
              required:
                - access_token
      responses:
        '200':
          $ref: '#/components/responses/AuthResponse'
        '400':
          $ref: '#/components/responses/default-bad-request'
        default:
          $ref: '#/components/responses/default-error'
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logout user
      operationId: logout
      responses:
        '200':
          $ref: '#/components/responses/LogoutResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        default:
          $ref: '#/components/responses/default-error'
  /me:
    get:
      tags:
        - user
      summary: Get Current User
      operationId: getCurrentUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - user
      summary: Update Current User
      operationId: patchCurrentUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCurrentUserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - user
      summary: Update Current User
      operationId: putCurrentUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCurrentUserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        default:
          $ref: '#/components/responses/default-error'
  /employees:
    get:
      summary: Get employees of the organization
      tags:
        - employees
      description: Get all employees
      operationId: getEmployees
      responses:
        '200':
          description: A list of employees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployeesResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /employees/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get employee by id
      tags:
        - employees
      operationId: getEmployeeById
      responses:
        '200':
          description: A single employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployeeResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    patch:
      summary: Update employee by id
      tags:
        - employees
      operationId: patchEmployeeById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchEmployeeRequest'
      responses:
        '200':
          description: A single employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployeeResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      summary: Delete employee by id
      tags:
        - employees
      operationId: deleteEmployeeById
      responses:
        '200':
          description: Employee deleted successfully
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /employees/invite:
    post:
      summary: Invite employee to the organization
      tags:
        - employees
      description: Invite employee to the organization
      operationId: inviteEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteEmployeeRequest'
      responses:
        '200':
          description: Employee invited successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEmployeeResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
  /app/roles:
    get:
      summary: Get all roles in system
      tags:
        - employees
      operationId: getRoles
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                required:
                  - data
        '401':
          $ref: '#/components/responses/default-unauthorized'
        default:
          $ref: '#/components/responses/default-error'
  /audit-logs:
    get:
      summary: Get audit logs
      description: Get audit logs
      tags:
        - audit-logs
      parameters:
        - name: object_type_id
          in: query
          description: The type of the object to filter by
          required: false
          schema:
            type: integer
        - name: object_id
          in: query
          description: The id of the object to filter by
          required: false
          schema:
            type: string
            format: uuid
      operationId: getAuditLogs
      responses:
        '200':
          description: Audit logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuditLogsResponse'
        '401':
          $ref: '#/components/responses/default-unauthorized'
        '403':
          $ref: '#/components/responses/default-forbidden'
        default:
          $ref: '#/components/responses/default-error'
components:
  securitySchemes:
    apiToken:
      description: API key authentication
      type: apiKey
      name: X-Api-Key
      in: header
    cookie:
      type: apiKey
      in: cookie
      name: storeit_session
  schemas:
    ErrorContent:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
          required:
            - code
            - message
      required:
        - error
    OrganizationBase:
      type: object
      properties:
        name:
          type: string
          example: Exotic
          minLength: 1
          maxLength: 100
        subdomain:
          type: string
          example: exotic
          minLength: 1
          maxLength: 100
          pattern: ^[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$
      required:
        - name
        - subdomain
    Organization:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              example: def3df1a-7b8f-4552-b437-a1eab851403f
          required:
            - id
        - $ref: '#/components/schemas/OrganizationBase'
    GetOrganizationsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Organization'
          required:
            - data
    CreateOrganizationRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/OrganizationBase'
    CreateOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Organization'
          required:
            - data
    GetOrganizationByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Organization'
          required:
            - data
    OrganizationUpdate:
      type: object
      properties:
        name:
          type: string
          example: Exotic
          minLength: 1
          maxLength: 100
      required:
        - name
    UpdateOrganizationRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/OrganizationUpdate'
    UpdateOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Organization'
          required:
            - data
    storage-alias:
      type: string
      minLength: 1
      maxLength: 100
      example: A1
    UnitBase:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Moscow
        alias:
          $ref: '#/components/schemas/storage-alias'
        address:
          type: string
          nullable: true
          example: 123 Main St, Moscow, Russia
      required:
        - name
        - alias
    Unit:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              example: def3df1a-7b8f-4552-b437-a1eab851403f
          required:
            - id
        - $ref: '#/components/schemas/UnitBase'
        - type: object
          properties:
            address:
              type: string
              nullable: true
          required:
            - address
    GetOrganizationUnitsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Unit'
          required:
            - data
    CreateOrganizationUnitRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnitBase'
    CreateOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Unit'
          required:
            - data
    GetOrganizationUnitByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Unit'
          required:
            - data
    UpdateOrganizationUnitRequest:
      allOf:
        - $ref: '#/components/schemas/UnitBase'
    UpdateOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Unit'
          required:
            - data
    UnitPatch:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Moscow
        alias:
          type: string
          minLength: 1
          maxLength: 100
          example: MWS
        address:
          type: string
          nullable: true
    PatchOrganizationUnitRequest:
      allOf:
        - $ref: '#/components/schemas/UnitPatch'
    PatchOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Unit'
          required:
            - data
    StorageGroupBase:
      type: object
      properties:
        parentId:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Main Warehouse
        alias:
          $ref: '#/components/schemas/storage-alias'
        unitId:
          type: string
          format: uuid
      required:
        - name
        - alias
        - unitId
    StorageGroup:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            parentId:
              type: string
              format: uuid
              nullable: true
            unitId:
              type: string
              format: uuid
          required:
            - id
            - parentId
            - unitId
        - $ref: '#/components/schemas/StorageGroupBase'
    GetStorageGroupsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    CreateStorageGroupRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/StorageGroupBase'
    CreateStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    GetStorageGroupByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    UpdateStorageGroupRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/StorageGroupBase'
    UpdateStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    CellGroupBase:
      type: object
      properties:
        name:
          type: string
        alias:
          $ref: '#/components/schemas/storage-alias'
        storageGroupId:
          type: string
          format: uuid
          nullable: true
        unitId:
          type: string
          format: uuid
      required:
        - name
        - alias
        - unitId
    CellGroup:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
          required:
            - id
        - $ref: '#/components/schemas/CellGroupBase'
        - type: object
          properties:
            storageGroupId:
              type: string
              format: uuid
              nullable: true
          required:
            - storageGroupId
            - unitId
    GetCellsGroupsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CellGroup'
      required:
        - data
    CreateCellsGroupRequest:
      allOf:
        - $ref: '#/components/schemas/CellGroupBase'
    CreateCellsGroupResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroup'
      required:
        - data
    GetCellsGroupByIdResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroup'
      required:
        - data
    UpdateCellsGroupRequest:
      allOf:
        - $ref: '#/components/schemas/CellGroupBase'
    UpdateCellsGroupResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroup'
      required:
        - data
    CellBase:
      type: object
      properties:
        alias:
          type: string
        row:
          type: integer
          minimum: 1
        level:
          type: integer
          minimum: 1
        position:
          type: integer
          minimum: 1
      required:
        - alias
        - row
        - level
        - position
    Cell:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
          required:
            - id
        - $ref: '#/components/schemas/CellBase'
    GetCellsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Cell'
      required:
        - data
    CreateCellRequest:
      allOf:
        - $ref: '#/components/schemas/CellBase'
    CreateCellResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Cell'
      required:
        - data
    GetCellByIdResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Cell'
      required:
        - data
    UpdateCellRequest:
      allOf:
        - $ref: '#/components/schemas/CellBase'
    UpdateCellResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Cell'
      required:
        - data
    ItemBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: Item 1
        description:
          type: string
          example: Description
          nullable: true
      required:
        - name
    Item:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            description:
              type: string
              nullable: true
          required:
            - description
            - id
    ItemVariantBase:
      type: object
      properties:
        name:
          type: string
          example: Variant 1
        article:
          type: string
          nullable: true
          example: 123456789012
        ean13:
          type: integer
          format: int32
          nullable: true
          example: 1234567890123
      required:
        - name
    ItemVariant:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
          required:
            - id
        - $ref: '#/components/schemas/ItemVariantBase'
        - type: object
          properties:
            article:
              type: string
              nullable: true
              example: 123456789012
            ean13:
              type: integer
              nullable: true
              format: int32
              example: 1234567890123
          required:
            - article
            - ean13
    ItemForList:
      type: object
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            variants:
              type: array
              items:
                $ref: '#/components/schemas/ItemVariant'
          required:
            - variants
    GetItemsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ItemForList'
          required:
            - data
    ItemCreate:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
    CreateItemRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemCreate'
    CellForInstance:
      allOf:
        - $ref: '#/components/schemas/Cell'
        - type: object
          properties:
            cellPath:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  alias:
                    type: string
                  objectType:
                    type: string
                    enum:
                      - cell
                      - cells_group
                      - storage_group
                required:
                  - id
                  - name
                  - alias
                  - objectType
          required:
            - cellPath
    InstanceForItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - available
            - reserved
            - consumed
        variant:
          $ref: '#/components/schemas/ItemVariant'
        cell:
          $ref: '#/components/schemas/CellForInstance'
      required:
        - id
        - status
        - variant
        - cell
    ItemFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            variants:
              type: array
              items:
                $ref: '#/components/schemas/ItemVariant'
            instances:
              type: array
              items:
                $ref: '#/components/schemas/InstanceForItem'
          required:
            - variants
            - instances
    CreateItemResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    GetItemVariantsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ItemVariant'
      required:
        - data
    CreateItemVariantRequest:
      allOf:
        - $ref: '#/components/schemas/ItemVariantBase'
    CreateItemVariantResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ItemVariant'
      required:
        - data
    GetItemVariantByIdResponse:
      type: object
      properties:
        data:
          type: object
          $ref: '#/components/schemas/ItemVariant'
      required:
        - data
    UpdateItemVariantRequest:
      allOf:
        - $ref: '#/components/schemas/ItemVariantBase'
    UpdateItemVariantResponse:
      type: object
      properties:
        data:
          type: object
          $ref: '#/components/schemas/ItemVariant'
      required:
        - data
    GetItemByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    UpdateItemRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemCreate'
    UpdateItemResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    InstanceFull:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: Instance ID
        status:
          type: string
          enum:
            - available
            - reserved
            - consumed
        item:
          type: object
          $ref: '#/components/schemas/Item'
        variant:
          $ref: '#/components/schemas/ItemVariant'
        cell:
          $ref: '#/components/schemas/CellForInstance'
      required:
        - id
        - itemId
        - status
        - variant
        - cell
    GetInstancesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/InstanceFull'
      required:
        - data
    GetInstancesByItemIdResponse:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/InstanceForItem'
      required:
        - data
    InstanceCreateForItem:
      type: object
      properties:
        variantId:
          type: string
          format: uuid
        cellId:
          type: string
          format: uuid
          nullable: true
      required:
        - variantId
    CreateInstanceForItemRequest:
      allOf:
        - $ref: '#/components/schemas/InstanceCreateForItem'
    CreateInstanceForItemResponse:
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/InstanceForItem'
      required:
        - data
    Token:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          description: The name of the token
        token:
          type: string
          description: The token secret
      required:
        - id
        - name
        - token
    GetApiTokensResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Token'
      required:
        - data
    TokenCreate:
      type: object
      properties:
        name:
          type: string
          description: The name of the token
      required:
        - name
    CreateApiTokenRequest:
      allOf:
        - $ref: '#/components/schemas/TokenCreate'
    CreateApiTokenResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Token'
      required:
        - data
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
          nullable: true
        email:
          type: string
      required:
        - id
        - email
        - first_name
        - last_name
        - middle_name
    GetCurrentUserResponse:
      allOf:
        - $ref: '#/components/schemas/User'
    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
          nullable: true
      required:
        - first_name
        - last_name
        - middle_name
    UpdateCurrentUserRequest:
      allOf:
        - $ref: '#/components/schemas/UserUpdate'
    UserPatch:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
          nullable: true
      required:
        - first_name
        - last_name
        - middle_name
    PatchCurrentUserRequest:
      allOf:
        - $ref: '#/components/schemas/UserPatch'
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
      required:
        - id
        - name
        - displayName
        - description
    Employee:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
          nullable: true
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
        - userId
        - firstName
        - lastName
        - middleName
        - email
        - role
    GetEmployeesResponse:
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Employee'
          required:
            - data
    GetEmployeeResponse:
      allOf:
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Employee'
          required:
            - data
    PatchEmployeeRequest:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        roleId:
          type: integer
      required:
        - userId
    InviteEmployeeRequest:
      type: object
      properties:
        email:
          type: string
        roleId:
          type: integer
      required:
        - email
        - roleId
    AuditLog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        employee:
          $ref: '#/components/schemas/Employee'
        action:
          type: string
          enum:
            - create
            - update
            - delete
        time:
          type: string
          format: date-time
        targetObjectType:
          type: object
          properties:
            id:
              type: integer
            group:
              type: string
            name:
              type: string
          required:
            - id
            - group
            - name
        targetObjectId:
          type: string
          format: uuid
        prechangeState:
          type: object
          additionalProperties: true
          nullable: true
        postchangeState:
          type: object
          additionalProperties: true
          nullable: true
      required:
        - id
        - employee
        - action
        - time
        - targetObjectType
        - targetObjectId
        - prechangeState
        - postchangeState
    GetAuditLogsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AuditLog'
      required:
        - data
  responses:
    default-error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorContent'
    default-unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorContent'
    default-conflict:
      description: Conflict, resource duplication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorContent'
    default-forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorContent'
    AuthResponse:
      description: Auth response
      headers:
        Set-Cookie:
          schema:
            type: string
            description: Auth cookie
          required: true
    default-bad-request:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorContent'
    LogoutResponse:
      description: Logout response
      headers:
        Set-Cookie:
          schema:
            type: string
            description: Cleared auth cookie
          required: true
