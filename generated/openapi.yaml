openapi: 3.0.3
info:
  title: storeit â€” backend
  contact:
    email: evgeny@evseevs.ru
  version: 0.0.1
  license:
    name: PRIVATE
    url: https://store-it.ru
servers:
  - url: http://localhost:8080/api/v0
security: []
tags:
  - name: org
    description: Organization management
  - name: unit
    description: Unit management
  - name: storage-group
    description: Storage group management
  - name: item
    description: Item management
paths:
  /orgs:
    get:
      tags:
        - org
      summary: Get list of Organizations
      operationId: getOrganizations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationsResponse'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - org
      summary: Create Organization
      operationId: createOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationResponse'
        default:
          $ref: '#/components/responses/default-error'
  /orgs/{id}:
    parameters:
      - name: id
        in: path
        description: Organization ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - org
      summary: Get Organization by ID
      operationId: getOrganizationById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - org
      summary: Delete Organization
      operationId: deleteOrganization
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - org
      summary: Update Organization
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationResponse'
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - org
      summary: Update Organization
      operationId: patchOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrganizationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchOrganizationResponse'
        default:
          $ref: '#/components/responses/default-error'
  /units:
    get:
      tags:
        - unit
      summary: Get list of Organization Units
      operationId: getOrganizationUnits
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationUnitsResponse'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - unit
      summary: Create Organization Unit
      operationId: createUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationUnitRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrganizationUnitResponse'
        default:
          $ref: '#/components/responses/default-error'
  /units/{id}:
    parameters:
      - name: id
        in: path
        description: Unit ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - unit
      summary: Get Unit by ID
      operationId: getOrganizationUnitById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationUnitByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - unit
      summary: Delete Organization Unit
      operationId: deleteOrganizationUnit
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - unit
      summary: Update Organization Unit
      operationId: updateOrganizationUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationUnitRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateOrganizationUnitResponse'
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - unit
      summary: Patch Organization Unit
      operationId: patchOrganizationUnit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchOrganizationUnitRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchOrganizationUnitResponse'
        default:
          $ref: '#/components/responses/default-error'
  /storage-groups:
    get:
      tags:
        - storage-group
      summary: Get list of Storage Groups
      operationId: getStorageGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStorageGroupsResponse'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - storage-group
      summary: Create Storage Group
      operationId: createStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStorageGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStorageGroupResponse'
        default:
          $ref: '#/components/responses/default-error'
  /storage-groups/{id}:
    parameters:
      - name: id
        in: path
        description: Storage Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - storage-group
      summary: Get Storage Group by ID
      operationId: getStorageGroupById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStorageGroupByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - storage-group
      summary: Delete Storage Group
      operationId: deleteStorageGroup
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - storage-group
      summary: Patch Storage Group
      operationId: patchStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchStorageGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchStorageGroupResponse'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - storage-group
      summary: Update Storage Group
      operationId: updateStorageGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStorageGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStorageGroupResponse'
        default:
          $ref: '#/components/responses/default-error'
  /items:
    get:
      tags:
        - item
      summary: Get list of Items
      operationId: getItems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemsResponse'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - item
      summary: Create Item
      operationId: createItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateItemResponse'
        default:
          $ref: '#/components/responses/default-error'
  /items/{id}:
    parameters:
      - name: id
        in: path
        description: Item ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - item
      summary: Get Item by ID
      operationId: getItemById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetItemByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - item
      summary: Delete Item
      operationId: deleteItem
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - item
      summary: Patch Item
      operationId: patchItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchItemRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchItemResponse'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - item
      summary: Update Item
      operationId: updateItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateItemResponse'
        default:
          $ref: '#/components/responses/default-error'
  /auth/oauth2/yandex:
    post:
      tags:
        - auth
      summary: Exchange Yandex Access token for Session token
      operationId: exchangeYandexAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_token:
                  type: string
                  description: Yandex Access token
              required:
                - access_token
      responses:
        '200':
          $ref: '#/components/responses/AuthResponse'
        default:
          $ref: '#/components/responses/default-error'
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logout user
      operationId: logout
      responses:
        '200':
          $ref: '#/components/responses/LogoutResponse'
        default:
          $ref: '#/components/responses/default-error'
  /me:
    get:
      tags:
        - unit
      summary: Get Current User
      operationId: getCurrentUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentUserResponse'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups:
    get:
      tags:
        - cells-group
      summary: Get list of Cells Groups
      operationId: getCellsGroups
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellsGroupsResponse'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - cells-group
      summary: Create Cells Group
      operationId: createCellsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCellsGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCellsGroupResponse'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups/{groupId}:
    parameters:
      - name: groupId
        in: path
        description: Cells Group ID
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - cells-group
      summary: Get Cells Group by ID
      operationId: getCellsGroupById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellsGroupByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - cells-group
      summary: Delete Cells Group
      operationId: deleteCellsGroup
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - storage-group
      summary: Patch Cells Group
      operationId: patchCellsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCellsGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchCellsGroupResponse'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - cells-group
      summary: Update Cells Group
      operationId: updateCellsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCellsGroupRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCellsGroupResponse'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups/{groupId}/cells:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - cells-group
      summary: Get list of Cells
      operationId: getCells
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellsResponse'
        default:
          $ref: '#/components/responses/default-error'
    post:
      tags:
        - cells-group
      summary: Create Cells
      operationId: createCell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCellRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCellResponse'
        default:
          $ref: '#/components/responses/default-error'
  /cells-groups/{groupId}/cells/{cellId}:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: cellId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - cells-group
      summary: Get Cell by ID
      operationId: getCellById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCellByIdResponse'
        default:
          $ref: '#/components/responses/default-error'
    delete:
      tags:
        - cells-group
      summary: Delete Cell
      operationId: deleteCell
      responses:
        '200':
          description: Successful operation
        default:
          $ref: '#/components/responses/default-error'
    patch:
      tags:
        - cells-group
      summary: Patch Cell
      operationId: patchCell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchCellRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchCellResponse'
        default:
          $ref: '#/components/responses/default-error'
    put:
      tags:
        - cells-group
      summary: Update Cell
      operationId: updateCell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCellRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCellResponse'
        default:
          $ref: '#/components/responses/default-error'
components:
  schemas:
    Error:
      description: Represents error object
      type: object
      properties:
        error_id:
          type: string
        message:
          type: string
      required:
        - error_id
        - message
    OrganizationBase:
      type: object
      properties:
        name:
          type: string
          example: Exotic
        subdomain:
          type: string
          example: exotic
          minLength: 1
          maxLength: 255
          pattern: ^[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$
      required:
        - name
        - subdomain
    Organization:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              example: def3df1a-7b8f-4552-b437-a1eab851403f
          required:
            - id
        - $ref: '#/components/schemas/OrganizationBase'
    GetOrganizationsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Organization'
          required:
            - data
    CreateOrganizationRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/OrganizationBase'
    CreateOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Organization'
          required:
            - data
    GetOrganizationByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Organization'
          required:
            - data
    UpdateOrganizationRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/Organization'
    UpdateOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Organization'
          required:
            - data
    OrganizationPatch:
      type: object
      properties:
        name:
          type: string
          example: Exotic
        subdomain:
          type: string
          example: exotic
          minLength: 1
          maxLength: 255
          pattern: ^[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$
    PatchOrganizationRequest:
      allOf:
        - $ref: '#/components/schemas/OrganizationPatch'
    PatchOrganizationResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Organization'
    UnitBase:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Moscow
        alias:
          type: string
          minLength: 1
          maxLength: 100
          example: MWS
          pattern: ^[A-Z-]+$
        address:
          type: string
          nullable: true
          example: 123 Main St, Moscow, Russia
      required:
        - name
        - alias
    Unit:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              example: def3df1a-7b8f-4552-b437-a1eab851403f
          required:
            - id
        - $ref: '#/components/schemas/UnitBase'
        - type: object
          properties:
            address:
              type: string
              nullable: true
          required:
            - address
    GetOrganizationUnitsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Unit'
          required:
            - data
    CreateOrganizationUnitRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnitBase'
    CreateOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Unit'
          required:
            - data
    GetOrganizationUnitByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/Unit'
          required:
            - data
    UpdateOrganizationUnitRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/UnitBase'
    UpdateOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Unit'
          required:
            - data
    UnitPatch:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: Moscow
        alias:
          type: string
          minLength: 1
          maxLength: 100
          example: MWS
          pattern: ^[A-Z-]+$
        address:
          type: string
          nullable: true
    PatchOrganizationUnitRequest:
      allOf:
        - $ref: '#/components/schemas/UnitPatch'
    PatchOrganizationUnitResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Unit'
          required:
            - data
    StorageGroupBase:
      type: object
      properties:
        parentId:
          type: string
          format: uuid
          nullable: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        name:
          type: string
          example: Main Warehouse
        alias:
          type: string
          example: MW
        unitId:
          type: string
          format: uuid
          example: def3df1a-7b8f-4552-b437-a1eab851403f
      required:
        - name
        - alias
        - unitId
    StorageGroup:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              example: def3df1a-7b8f-4552-b437-a1eab851403f
            parentId:
              type: string
              format: uuid
              nullable: true
              example: def3df1a-7b8f-4552-b437-a1eab851403f
          required:
            - id
            - parentId
        - $ref: '#/components/schemas/StorageGroupBase'
    GetStorageGroupsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    CreateStorageGroupRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/StorageGroupBase'
    CreateStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    GetStorageGroupByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    UpdateStorageGroupRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/StorageGroupBase'
    UpdateStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    StorageGroupPatch:
      type: object
      properties:
        parentId:
          type: string
          format: uuid
          nullable: true
          example: def3df1a-7b8f-4552-b437-a1eab851403f
        name:
          type: string
          example: Main Warehouse
        alias:
          type: string
          example: MW
        unitId:
          type: string
          format: uuid
          example: def3df1a-7b8f-4552-b437-a1eab851403f
    PatchStorageGroupRequest:
      allOf:
        - $ref: '#/components/schemas/StorageGroupPatch'
    PatchStorageGroupResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/StorageGroup'
          required:
            - data
    ItemBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: Item 1
        description:
          type: string
          example: Description
          nullable: true
      required:
        - name
    Item:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
            description:
              type: string
              nullable: true
          required:
            - description
            - id
    GetItemsResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Item'
          required:
            - data
    ItemVariantBase:
      type: object
      properties:
        name:
          type: string
          example: Variant 1
        article:
          type: string
          nullable: true
          example: 123456789012
        ean13:
          type: integer
          nullable: true
          example: 1234567890123
      required:
        - name
    ItemCreate:
      allOf:
        - $ref: '#/components/schemas/ItemBase'
        - type: object
          properties:
            variants:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/ItemVariantBase'
      required:
        - variants
    CreateItemRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemCreate'
    ItemVariant:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
          required:
            - id
        - $ref: '#/components/schemas/ItemVariantBase'
        - type: object
          properties:
            article:
              type: string
              nullable: true
              example: 123456789012
            ean13:
              type: integer
              nullable: true
              example: 1234567890123
          required:
            - article
            - ean13
    ItemFull:
      type: object
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            variants:
              type: array
              items:
                $ref: '#/components/schemas/ItemVariant'
          required:
            - variants
    CreateItemResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    GetItemByIdResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    ItemVariantEdit:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
          required:
            - id
        - $ref: '#/components/schemas/ItemVariantBase'
    UpdateItemRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemCreate'
        - type: object
          properties:
            variants:
              type: array
              items:
                $ref: '#/components/schemas/ItemVariantEdit'
          required:
            - variants
    UpdateItemResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    ItemVariantPatchInItem:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
              example: Variant 1
            article:
              type: string
              nullable: true
              example: 123456789012
            ean13:
              type: integer
              nullable: true
              example: 1234567890123
    ItemPatch:
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: Item 1
            description:
              type: string
              example: Description
              nullable: true
            variants:
              type: array
              items:
                $ref: '#/components/schemas/ItemVariantPatchInItem'
    PatchItemRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/ItemPatch'
    PatchItemResponse:
      type: object
      allOf:
        - type: object
          properties:
            data:
              type: object
              $ref: '#/components/schemas/ItemFull'
          required:
            - data
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
          nullable: true
        email:
          type: string
      required:
        - id
        - email
        - first_name
        - last_name
        - middle_name
    GetCurrentUserResponse:
      allOf:
        - $ref: '#/components/schemas/User'
    CellGroupBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        alias:
          type: string
        storage_group_id:
          type: string
          format: uuid
      required:
        - id
        - name
        - alias
        - storage_group_id
    GetCellsGroupsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CellGroupBase'
      required:
        - data
    CreateCellsGroupRequest:
      allOf:
        - $ref: '#/components/schemas/CellGroupBase'
    CreateCellsGroupResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroupBase'
      required:
        - data
    GetCellsGroupByIdResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroupBase'
      required:
        - data
    UpdateCellsGroupRequest:
      allOf:
        - $ref: '#/components/schemas/CellGroupBase'
    UpdateCellsGroupResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroupBase'
      required:
        - data
    CellGroupPatch:
      type: object
      properties:
        name:
          type: string
        alias:
          type: string
        storage_group_id:
          type: string
          format: uuid
    PatchCellsGroupRequest:
      allOf:
        - $ref: '#/components/schemas/CellGroupPatch'
    PatchCellsGroupResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellGroupBase'
      required:
        - data
    CellBase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        alias:
          type: string
        row:
          type: integer
          minimum: 1
        level:
          type: integer
          minimum: 1
        position:
          type: integer
          minimum: 1
      required:
        - id
        - alias
        - row
        - level
        - position
    GetCellsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CellBase'
      required:
        - data
    CreateCellRequest:
      allOf:
        - $ref: '#/components/schemas/CellBase'
    CreateCellResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellBase'
      required:
        - data
    GetCellByIdResponse:
      allOf:
        - $ref: '#/components/schemas/CellBase'
    UpdateCellRequest:
      allOf:
        - $ref: '#/components/schemas/CellBase'
    UpdateCellResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellBase'
      required:
        - data
    CellPatch:
      type: object
      properties:
        alias:
          type: string
        row:
          type: integer
          minimum: 1
        level:
          type: integer
          minimum: 1
        position:
          type: integer
          minimum: 1
    PatchCellRequest:
      allOf:
        - $ref: '#/components/schemas/CellPatch'
    PatchCellResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CellBase'
      required:
        - data
  responses:
    default-error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AuthResponse:
      description: Auth response
      headers:
        Set-Cookie:
          schema:
            type: string
            description: Auth cookie
          required: true
    LogoutResponse:
      description: Logout response
      headers:
        Set-Cookie:
          schema:
            type: string
            description: Cleared auth cookie
          required: true
