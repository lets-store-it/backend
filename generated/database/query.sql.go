// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrg = `-- name: CreateOrg :one
INSERT INTO org (name, subdomain) VALUES ($1, $2) RETURNING id, name, subdomain, is_deleted
`

type CreateOrgParams struct {
	Name      string
	Subdomain string
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, createOrg, arg.Name, arg.Subdomain)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.IsDeleted,
	)
	return i, err
}

const deleteOrg = `-- name: DeleteOrg :exec
UPDATE org SET is_deleted = TRUE WHERE id = $1
`

func (q *Queries) DeleteOrg(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrg, id)
	return err
}

const exampleJoin = `-- name: ExampleJoin :many
SELECT org.id, org.name, subdomain, is_deleted, org_unit.id, org_id, org_unit.name, address FROM org
JOIN org_unit ON org.id = org_unit.org_id
WHERE org.id = $1
`

type ExampleJoinRow struct {
	ID        pgtype.UUID
	Name      string
	Subdomain string
	IsDeleted bool
	ID_2      pgtype.UUID
	OrgID     pgtype.UUID
	Name_2    string
	Address   pgtype.Text
}

func (q *Queries) ExampleJoin(ctx context.Context, id pgtype.UUID) ([]ExampleJoinRow, error) {
	rows, err := q.db.Query(ctx, exampleJoin, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleJoinRow
	for rows.Next() {
		var i ExampleJoinRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subdomain,
			&i.IsDeleted,
			&i.ID_2,
			&i.OrgID,
			&i.Name_2,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrgById = `-- name: GetOrgById :one
SELECT id, name, subdomain, is_deleted FROM org WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetOrgById(ctx context.Context, id pgtype.UUID) (Org, error) {
	row := q.db.QueryRow(ctx, getOrgById, id)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.IsDeleted,
	)
	return i, err
}

const getOrgs = `-- name: GetOrgs :many
SELECT id, name, subdomain, is_deleted FROM org WHERE is_deleted = FALSE LIMIT $1 OFFSET $2
`

type GetOrgsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrgs(ctx context.Context, arg GetOrgsParams) ([]Org, error) {
	rows, err := q.db.Query(ctx, getOrgs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Org
	for rows.Next() {
		var i Org
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Subdomain,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isOrgExists = `-- name: IsOrgExists :one
SELECT EXISTS (SELECT 1 FROM org WHERE name = $1 OR subdomain = $2)
`

type IsOrgExistsParams struct {
	Name      string
	Subdomain string
}

func (q *Queries) IsOrgExists(ctx context.Context, arg IsOrgExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, isOrgExists, arg.Name, arg.Subdomain)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isOrgExistsById = `-- name: IsOrgExistsById :one
SELECT EXISTS (SELECT 1 FROM org WHERE id = $1)
`

func (q *Queries) IsOrgExistsById(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isOrgExistsById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateOrg = `-- name: UpdateOrg :one
UPDATE org SET name = $2, subdomain = $3 WHERE id = $1 RETURNING id, name, subdomain, is_deleted
`

type UpdateOrgParams struct {
	ID        pgtype.UUID
	Name      string
	Subdomain string
}

func (q *Queries) UpdateOrg(ctx context.Context, arg UpdateOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, updateOrg, arg.ID, arg.Name, arg.Subdomain)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Subdomain,
		&i.IsDeleted,
	)
	return i, err
}
